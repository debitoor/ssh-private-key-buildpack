#!/usr/bin/env bash

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

ENV_DIR=${3:-}
# Notify the user if no SSH_KEY is set. If the key is not present we exit successfully (status code of 0),
# though this means that this build back really does no work.
if [[ ( ! -e "${ENV_DIR}/SSH_KEY" ) || ( "$(cat $ENV_DIR/SSH_KEY)" == "" )  ]]
then
    echo "-----> No SSH private key SSH_KEY environment variable found."
    echo "-----> WARNING: If not setting the SSH_KEY was intentional, disregard this message. Otherwise, "\
         "set the  SSH_KEY environment variable to the base64 encoded private key"
    echo "-----> Proceeding to exit the build successfully."
    exit 0
fi
SSH_PRIVATE_KEY="$(cat $ENV_DIR/SSH_KEY)"
# Check for user-provided SSH_HOSTS. Default is github.org, but the user can provide a and environment
# varibable SSH_HOSTS that is a comma-delimited string of hosts to associate the SSH key with
if [[ ( -e "${ENV_DIR}/SSH_HOSTS" ) && ( "$(cat $ENV_DIR/SSH_HOSTS)" != "" ) ]]; then
    SSH_HOSTS="$(cat $ENV_DIR/SSH_HOSTS)"
    SSH_HOSTS_ARRAY=(${SSH_HOSTS//,/ })
    echo "-----> User provided SSH_HOSTS have been identified. The ${#SSH_HOSTS_ARRAY[@]} hosts are: ${SSH_HOSTS_ARRAY[@]}"
else
    SSH_HOSTS_ARRAY=("git@github.com")
    echo "-----> No provided SSH_HOSTS provided, so adding only the default host of ${SSH_HOSTS_ARRAY[@]}."
fi


echo "-----> Running SSH private key setup"
# The .ssh needs to be located in the home directory which is different to the
# home directory of the built machine. The symlink resolves the issue.
mkdir "$1/.ssh"
ln -s "$1/.ssh" "$HOME/.ssh"
echo "$SSH_PRIVATE_KEY" | base64 --decode > "$HOME/.ssh/id_rsa"

for hostname in "${SSH_HOSTS_ARRAY[@]}"; do
    echo "Ading host ${hostname} to the allowed hosts config"
	ssh -oStrictHostKeyChecking=no -T $hostname 2>&1 | indent
done
exit 0
